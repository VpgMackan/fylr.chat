generator client {
  provider        = "prisma-client-js"
  output          = "../generated/prisma"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgvector(map: "vector", schema: "extensions")]
}

model Conversations {
  title                  String                   @db.VarChar(255)
  created_at             DateTime                 @db.Timestamp(6)
  metadata               Json
  pocket_id              String                   @db.Uuid
  id                     String                   @id @db.Uuid
  Pockets                Pockets                  @relation(fields: [pocket_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Conversations_pocket_id_Pockets_id")
  Messages               Messages[]
  UserRecentConversation UserRecentConversation[]
}

model Messages {
  id              String        @id @db.Uuid
  conversation_id String        @db.Uuid
  role            String        @db.VarChar(20)
  content         String
  created_at      DateTime      @db.Timestamp(6)
  metadata        Json
  Conversations   Conversations @relation(fields: [conversation_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Messages_conversation_id_Conversations_id")

  @@index([conversation_id], map: "Messages_index_1")
  @@index([created_at], map: "Messages_index_2")
}

model Pockets {
  id            String          @id @db.Uuid
  user_id       String          @db.Uuid
  icon          String          @db.VarChar
  description   String?
  created_at    DateTime        @db.Timestamp(6)
  tags          String[]
  Conversations Conversations[]
  Users         Users           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Pockets_user_id_Users_id")
  Podcasts      Podcasts[]
  Sources       Sources[]
  Summaries     Summaries[]
}

model PodcastEpisodes {
  id         String   @id @db.Uuid
  podcast_id String   @db.Uuid
  audio_url  String
  metadata   Json
  title      String   @db.VarChar
  index      BigInt
  Podcasts   Podcasts @relation(fields: [podcast_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_PodcastEpisodes_podcast_id_Podcasts_id")
}

model Podcasts {
  id                 String               @id @db.Uuid
  pocket_id          String               @db.Uuid
  title              String
  created_at         DateTime             @db.Timestamp(6)
  metadata           Json
  PodcastEpisodes    PodcastEpisodes[]
  Pockets            Pockets              @relation(fields: [pocket_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Podcasts_pocket_id_Pockets_id")
  UserPinnedPodcasts UserPinnedPodcasts[]
}

model Sources {
  id          String    @id @db.Uuid
  pocket_id   String    @db.Uuid
  name        String?   @db.VarChar
  type        String    @db.VarChar
  url         String    @db.VarChar
  size        BigInt
  upload_time DateTime? @db.Timestamp(6)
  Pockets     Pockets   @relation(fields: [pocket_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Sources_pocket_id_Pockets_id")
  Vectors     Vectors[]
}

model Summaries {
  id           String         @id @db.Uuid
  pocket_id    String         @db.Uuid
  title        String         @db.VarChar(255)
  created_at   DateTime       @db.Timestamp(6)
  metadata     Json
  Pockets      Pockets        @relation(fields: [pocket_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Summaries_pocket_id_Pockets_id")
  SummaryChunk SummaryChunk[]
}

model SummaryChunk {
  id         String    @id @db.Uuid
  summary_id String    @db.Uuid
  content    String
  created_at DateTime  @db.Timestamp(6)
  metadata   Json
  title      String    @db.VarChar
  icon       String?   @db.VarChar
  Summaries  Summaries @relation(fields: [summary_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_SummaryChunk_summary_id_Summaries_id")

  @@index([summary_id], map: "SummaryChunk_index_1")
  @@index([created_at], map: "SummaryChunk_index_2")
}

model UserPinnedPodcasts {
  podcast_id String   @db.Uuid
  user_id    String   @db.Uuid
  Podcasts   Podcasts @relation(fields: [podcast_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_UserPinnedPodcasts_podcast_id_Podcasts_id")
  Users      Users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_UserPinnedPodcasts_user_id_Users_id")

  @@id([podcast_id, user_id])
}

model UserRecentConversation {
  conversation_id  String        @db.Uuid
  user_id          String        @db.Uuid
  last_accessed_at DateTime      @db.Timestamp(6)
  Conversations    Conversations @relation(fields: [conversation_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_UserRecentConversation_conversation_id_Conversations_id")
  Users            Users         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_UserRecentConversation_user_id_Users_id")

  @@id([conversation_id, user_id])
}

model Users {
  id                     String                   @id @db.Uuid
  email                  String                   @unique
  password               String
  name                   String
  Pockets                Pockets[]
  UserPinnedPodcasts     UserPinnedPodcasts[]
  UserRecentConversation UserRecentConversation[]
}

model Vectors {
  id        String                @id @db.Uuid
  file_id   String                @db.Uuid
  embedding Unsupported("vector")
  content   String
  Sources   Sources               @relation(fields: [file_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_Vectors_file_id_Sources_id")
}
